const PDFDocument = require('pdfkit');

/**
 * PDF Generation Service for BAS and FAS Reports
 * Creates professional ATO-compliant reports
 */
class PDFGenerationService {
  
  /**
   * Generate BAS Report PDF
   * @param {Object} basData - BAS data from Xero
   * @param {Object} options - Report options (companyName, period, etc.)
   * @returns {PDFDocument} PDF document stream
   */
  generateBASReport(basData, options = {}) {
    const { companyName = 'Unknown Company', fromDate, toDate, quarter } = options;
    
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    
    // Header
    this.addHeader(doc, 'Business Activity Statement (BAS)', companyName);
    
    // Period Information
    doc.fontSize(12).fillColor('#333333');
    doc.text(`Reporting Period: ${fromDate} to ${toDate}`, 50, 150);
    if (quarter) {
      doc.text(`Quarter: ${quarter}`, 50, 170);
    }
    doc.text(`Generated: ${new Date().toLocaleString('en-AU')}`, 50, 190);
    
    // Move to content area
    doc.moveDown(2);
    
    // GST Report Summary
    if (basData.gstReport) {
      this.addSection(doc, 'GST Summary', basData.gstReport);
    }
    
    // Profit & Loss Summary
    if (basData.profitLoss) {
      doc.addPage();
      this.addSection(doc, 'Profit & Loss Summary', basData.profitLoss);
    }
    
    // Invoices Summary
    if (basData.invoices?.Invoices) {
      doc.addPage();
      this.addInvoicesSummary(doc, basData.invoices.Invoices, 'BAS Period Invoices');
    }
    
    // Footer on each page
    const pages = doc.bufferedPageRange();
    for (let i = 0; i < pages.count; i++) {
      doc.switchToPage(i);
      this.addFooter(doc, i + 1, pages.count);
    }
    
    doc.end();
    return doc;
  }
  
  /**
   * Generate FAS Report PDF
   * @param {Object} fasData - FAS data from Xero
   * @param {Object} options - Report options (companyName, period, etc.)
   * @returns {PDFDocument} PDF document stream
   */
  generateFASReport(fasData, options = {}) {
    const { companyName = 'Unknown Company', fromDate, toDate, quarter } = options;
    
    const doc = new PDFDocument({ size: 'A4', margin: 50 });
    
    // Header
    this.addHeader(doc, 'Fringe Benefits Tax Activity Statement (FAS)', companyName);
    
    // Period Information
    doc.fontSize(12).fillColor('#333333');
    doc.text(`Reporting Period: ${fromDate} to ${toDate}`, 50, 150);
    if (quarter) {
      doc.text(`Quarter: ${quarter}`, 50, 170);
    }
    doc.text(`FBT Year: April ${new Date().getFullYear()} to March ${new Date().getFullYear() + 1}`, 50, 190);
    doc.text(`Generated: ${new Date().toLocaleString('en-AU')}`, 50, 210);
    
    // Move to content area
    doc.moveDown(2);
    
    // FBT Summary
    if (fasData.fbtSummary) {
      this.addSection(doc, 'FBT Summary', fasData.fbtSummary);
    }
    
    // FAS Reports
    if (fasData.fasReport) {
      doc.addPage();
      this.addSection(doc, 'FAS Report Details', fasData.fasReport);
    }
    
    // Profit & Loss (for FBT context)
    if (fasData.profitLoss) {
      doc.addPage();
      this.addSection(doc, 'Profit & Loss Summary', fasData.profitLoss);
    }
    
    // Footer on each page
    const pages = doc.bufferedPageRange();
    for (let i = 0; i < pages.count; i++) {
      doc.switchToPage(i);
      this.addFooter(doc, i + 1, pages.count);
    }
    
    doc.end();
    return doc;
  }
  
  /**
   * Add document header
   */
  addHeader(doc, title, companyName) {
    // Title
    doc.fontSize(20).fillColor('#1e40af').font('Helvetica-Bold');
    doc.text(title, 50, 50, { align: 'center' });
    
    // Company Name
    doc.fontSize(14).fillColor('#4b5563').font('Helvetica');
    doc.text(companyName, 50, 80, { align: 'center' });
    
    // Horizontal line
    doc.strokeColor('#e5e7eb').lineWidth(1);
    doc.moveTo(50, 120).lineTo(545, 120).stroke();
  }
  
  /**
   * Add footer with page numbers
   */
  addFooter(doc, pageNumber, totalPages) {
    const bottomMargin = doc.page.height - 50;
    
    doc.fontSize(9).fillColor('#9ca3af').font('Helvetica');
    doc.text(
      `Page ${pageNumber} of ${totalPages}`,
      50,
      bottomMargin,
      { align: 'center', width: 495 }
    );
    
    doc.text(
      'Generated by Compliance Management System',
      50,
      bottomMargin + 15,
      { align: 'center', width: 495 }
    );
  }
  
  /**
   * Add a section with data
   */
  addSection(doc, title, data) {
    // Section title
    doc.fontSize(14).fillColor('#1e40af').font('Helvetica-Bold');
    doc.text(title, 50);
    doc.moveDown(0.5);
    
    // Process report data
    if (data.Reports && Array.isArray(data.Reports)) {
      data.Reports.forEach((report) => {
        if (report.Rows) {
          this.processReportRows(doc, report.Rows);
        }
      });
    } else {
      // If it's not a standard report, try to display key-value pairs
      doc.fontSize(10).fillColor('#374151').font('Helvetica');
      Object.entries(data).slice(0, 20).forEach(([key, value]) => {
        if (typeof value !== 'object') {
          doc.text(`${key}: ${value}`, 70);
        }
      });
    }
    
    doc.moveDown();
  }
  
  /**
   * Process and render report rows
   */
  processReportRows(doc, rows, indent = 0) {
    if (!Array.isArray(rows)) return;
    
    rows.forEach((row) => {
      if (!row) return;
      
      // Handle section headers
      if (row.RowType === 'Section' && row.Title) {
        doc.fontSize(12).fillColor('#1e40af').font('Helvetica-Bold');
        doc.text(row.Title, 50 + (indent * 20));
        doc.moveDown(0.3);
        
        if (Array.isArray(row.Rows)) {
          this.processReportRows(doc, row.Rows, indent + 1);
        }
        return;
      }
      
      // Handle data rows
      if (Array.isArray(row.Cells) && row.Cells.length > 0) {
        doc.fontSize(10).fillColor('#374151').font('Helvetica');
        
        const description = row.Cells[0]?.Value || '';
        const value = row.Cells[row.Cells.length - 1]?.Value || '';
        
        // Format value as currency if it's a number
        let formattedValue = value;
        if (!isNaN(parseFloat(value))) {
          const numValue = parseFloat(value);
          formattedValue = `$${numValue.toLocaleString('en-AU', { minimumFractionDigits: 2, maximumFractionDigits: 2 })}`;
        }
        
        // Draw description on left, value on right
        const yPos = doc.y;
        doc.text(description, 50 + (indent * 20), yPos, { width: 350, continued: false });
        doc.text(formattedValue, 420, yPos, { width: 125, align: 'right' });
        doc.moveDown(0.2);
      }
    });
  }
  
  /**
   * Add invoices summary table
   */
  addInvoicesSummary(doc, invoices, title) {
    doc.fontSize(14).fillColor('#1e40af').font('Helvetica-Bold');
    doc.text(title, 50);
    doc.moveDown(0.5);
    
    // Table headers
    doc.fontSize(10).fillColor('#1e40af').font('Helvetica-Bold');
    doc.text('Invoice #', 50, doc.y, { width: 80, continued: true });
    doc.text('Contact', 130, doc.y, { width: 150, continued: true });
    doc.text('Date', 280, doc.y, { width: 80, continued: true });
    doc.text('Amount', 360, doc.y, { width: 90, continued: true });
    doc.text('Status', 450, doc.y, { width: 95 });
    doc.moveDown(0.3);
    
    // Draw line under headers
    doc.strokeColor('#e5e7eb').lineWidth(0.5);
    doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke();
    doc.moveDown(0.3);
    
    // Invoice data
    doc.fontSize(9).fillColor('#374151').font('Helvetica');
    const invoicesToShow = invoices.slice(0, 20); // Limit to 20 invoices
    
    invoicesToShow.forEach((invoice, index) => {
      const yPos = doc.y;
      
      // Check if we need a new page
      if (yPos > 700) {
        doc.addPage();
        doc.fontSize(10).fillColor('#1e40af').font('Helvetica-Bold');
        doc.text('Invoice #', 50, 50, { width: 80, continued: true });
        doc.text('Contact', 130, 50, { width: 150, continued: true });
        doc.text('Date', 280, 50, { width: 80, continued: true });
        doc.text('Amount', 360, 50, { width: 90, continued: true });
        doc.text('Status', 450, 50, { width: 95 });
        doc.moveDown(0.3);
        doc.fontSize(9).fillColor('#374151').font('Helvetica');
      }
      
      const invoiceNumber = invoice.InvoiceNumber || invoice.InvoiceID || '—';
      const contactName = invoice.Contact?.Name || '—';
      const date = invoice.Date ? new Date(invoice.Date).toLocaleDateString('en-AU') : '—';
      const total = invoice.Total ? `$${parseFloat(invoice.Total).toLocaleString('en-AU', { minimumFractionDigits: 2 })}` : '—';
      const status = invoice.Status || '—';
      
      doc.text(invoiceNumber, 50, doc.y, { width: 80, continued: true });
      doc.text(contactName, 130, doc.y, { width: 150, continued: true });
      doc.text(date, 280, doc.y, { width: 80, continued: true });
      doc.text(total, 360, doc.y, { width: 90, continued: true });
      doc.text(status, 450, doc.y, { width: 95 });
      doc.moveDown(0.4);
      
      // Add a light line between rows
      if (index < invoicesToShow.length - 1) {
        doc.strokeColor('#f3f4f6').lineWidth(0.5);
        doc.moveTo(50, doc.y).lineTo(545, doc.y).stroke();
        doc.moveDown(0.2);
      }
    });
    
    if (invoices.length > 20) {
      doc.moveDown(0.5);
      doc.fontSize(9).fillColor('#6b7280').font('Helvetica-Oblique');
      doc.text(`Showing 20 of ${invoices.length} total invoices`, 50);
    }
  }
}

module.exports = new PDFGenerationService();

